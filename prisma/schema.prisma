generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(cuid())
  email      String     @unique
  username   String     @unique
  password   String
  bio        String?    @db.VarChar(1024)
  image      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  articles   Article[]
  comments   Comment[]
  favorites  Favorite[]
  followers  Follow[]   @relation("FollowedRelation")
  following  Follow[]   @relation("FollowerRelation")
}

model Follow {
  followerId String
  followedId String
  createdAt  DateTime @default(now())
  follower   User     @relation("FollowerRelation", fields: [followerId], references: [id], onDelete: Cascade)
  followed   User     @relation("FollowedRelation", fields: [followedId], references: [id], onDelete: Cascade)

  @@id([followerId, followedId])
  @@index([followedId])
}

model Article {
  id             String        @id @default(cuid())
  slug           String        @unique
  title          String
  description    String
  body           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  favoritesCount Int           @default(0)
  authorId       String
  author         User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags           ArticleTag[]
  comments       Comment[]
  favorites      Favorite[]

  @@index([authorId, createdAt])
  @@index([createdAt])
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  articleId String
  authorId  String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([articleId, createdAt])
}

model Tag {
  id    String       @id @default(cuid())
  name  String       @unique
  posts ArticleTag[]
}

model ArticleTag {
  articleId String
  tagId     String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
  @@index([tagId])
}

model Favorite {
  userId    String
  articleId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@id([userId, articleId])
  @@index([articleId])
}
